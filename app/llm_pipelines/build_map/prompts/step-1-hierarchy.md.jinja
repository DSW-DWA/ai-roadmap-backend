# Material

{% for name, content in material.items()  %}
---
name: {{ name }}
---
{{ content }}
---
{% endfor %}

# Instruction

Using the following material, perform the following tasks:

## Concept Extraction

A Concept is a distinct unit of knowledge that represents an idea, skill, or topic which can be taught or learned.
Every Concept must have an unique name so it can be clearly identified and referenced.
Extract concepts from the given material.
1. Uniqueness: Assign each concept a unique, unambiguous name or label so it can be clearly identified.
2. Scope: Focus on concepts that are learnable, such as theories, processes, and entities.  
3. Style & wording:
  - Do not write too abstract and non-specific concepts like "Основные понятия", "Определения", "Различия" ect.
  - Do not write any explanation, descriptions, of definitions
  - Do no add any additional markup

## Concept Hierarchy

Arrange all extracted concepts into a well-organized hierarchy.  
- Start with a small number of general **root concepts**.
- Continue with more specific concepts as you move to the lower levels.
- Stop if there node which can't be expanded further, do not add any sub-concepts in the such case.
- There can't be multiple keys with same name, all keys are unique.
- Maintain a balanced depth (3–5 levels in hierarchy) and keep hierarchy well-organized hierarchy. 

## Concept Sources

For each concept in the hierarchy, add reference to source file where this concepts is takend from.
If file is not a well-structured markdown, or a makrown file without headers, write reference as: `file.md`
If a file is a well-structured markdown with headings, write both name and headers-path: `file.md#Quick-start/Setup/Requirements`

Use the file path from the name property in the YAML metadata block for each file.
When writing sources, you restricted to use sources from this list:
{% for source in allowed_sources %}
- {{ source }}
{% endif %}


## Response format

When constructing hierarchy, strictly follow this json schema:

```json
{{ json_schema }}
```
